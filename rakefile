require 'rake'
require 'fileutils'
Dir.glob(File.join(File.dirname(__FILE__), 'tools/Rake/*.rb')).each do |f|
	require f
end
include FileUtils

version = 'v3.5'
compileTarget = ENV.include?('target') ? ENV['target'] : 'debug'
project = "Machine.Specifications"
packageName = "Distribution/#{project}-#{compileTarget}.zip"
frameworkDir = File.join(ENV['windir'].dup, 'Microsoft.NET', 'Framework', version)
msbuild = File.join(frameworkDir, 'msbuild.exe')
mspec_options = []

task :setup => [ "setup:all" ]

file ".setup-done" => [ "rakefile" ] do
  Rake::Task["setup:all"].invoke
end

namespace :setup do
  task :all do
    touch ".setup-done"
  end
end

desc "Build and run specs"
task :default => [ "build", "tests:run", "specs:run" ]

desc "Build"
task :build => [ ".setup-done" ] do
  sh "#{msbuild} Source/#{project}.sln /property:Configuration=#{compileTarget}"
end

namespace :specs do
  task :view => :run do
    system "start Specs/#{project}.Specs.html"
  end

  task :run do
    puts 'Running Specs...'
    specs = ["Machine.Specifications.Specs.dll", "Machine.Specifications.Reporting.Specs.dll", "Machine.Specifications.ConsoleRunner.Specs.dll"].map {|spec| "Build/#{compileTarget}/Tests/#{spec}"}
    sh "Build/#{compileTarget}/mspec.exe", "--html", "Specs/#{project}.Specs.html", "-x", "example", *(mspec_options + specs)
    puts "Wrote specs to Specs/#{project}.Specs.html, run 'rake specs:view' to see them"
  end
end

namespace :tests do
  task :run do
	puts 'Running NUnit tests...'
	tests = ["Machine.Specifications.Tests.dll"].map {|test| "Build/#{compileTarget}/Tests/#{test}"}
	runner = NUnitRunner.new :compilemode => compileTarget, :platform => 'x86', :results => "Specs"
	runner.executeTests tests
	
	puts 'Running Gallio tests...'
	sh "Tools/Gallio/v3.1.397/Gallio.Echo.exe", "Build/#{compileTarget}/Tests/Gallio/Machine.Specifications.TestGallioAdapter.3.1.Tests.dll", "/plugin-directory:Build/#{compileTarget}", "/r:Local"
  end
end

desc "Open solution in VS"
task :sln do
  Thread.new do
    system "devenv Source/#{project}.sln"
  end
end

desc "Rebuild"
task :rebuild => [ ".setup-done", :clean ] do
  sh "#{msbuild} Source/#{project}.sln /property:Configuration=#{compileTarget}"
end

desc "Clean"
task :clean do
  sh "#{msbuild} Source/#{project}.sln /t:Clean /property:Configuration=#{compileTarget}"
  rm_f packageName
  rm_rf "Build"
end

desc "Packages the build artifacts"
task :package => [ "rebuild", "tests:run", "specs:run" ] do
  rm_f packageName
  
  cp 'License.txt', "Build/#{compileTarget}/"
  cp_r 'Distribution/Specifications/.', "Build/#{compileTarget}/"
  
  sz = SevenZip.new \
		 :tool => 'Tools/7-Zip/7za.exe',
		 :zip_name => packageName

  Dir.chdir("Build/#{compileTarget}") do
	  sz.zip :files => FileList.new('**/*').exclude('*.InstallLog').exclude('*.InstallState').exclude('Generation').exclude('Tests')
  end
end

desc "Teamcity build"
task :teamcity => [ :teamcity_environment, :package ]

desc "Sets up the Teamcity environment"
task :teamcity_environment do
  mspec_options.push "--teamcity"
end
